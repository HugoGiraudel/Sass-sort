/*! SassySort - v0.0.1 - 2014-02-19 */
$default-order:
	"!" "#" "$" "%" "&" "'" "(" ")" "*" "+" "," "-" "." "/" "[" "\\" "]" "^" "_" "{" "|" "}" "~"
	"0" "1" "2" "3" "4" "5" "6" "7" "8" "9"
	"a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z" !default;

// Compares two string to determine which comes first
//
// @param $a: first string
// @parem $b: second string
// @param $order: order to deal with
//
// @return $boolean
@function _str-compare($a, $b, $order) {
  @if type-of($a) == number and type-of($b) == number {
    @return $a < $b;
  }
  $a: to-lower-case($a + unquote(""));
  $b: to-lower-case($b + unquote(""));
  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);
    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }
  @return str-length($a) < str-length($b);
}

// Swaps values at indexes $a and $b from $list
//
// @param $list: list to update
// @param $a: index of first element
// @param $b: index of second element
//
// @return list
@function _swap($list, $a, $b) {
  @if abs($a) > length($list) or abs($b) > length($list) {
    @return $list;
  }
  $tmp: nth($list, $a);
  $list: set-nth($list, $a, nth($list, $b));
  $list: set-nth($list, $b, $tmp);
  @return $list;
}

@function bubble-sort($list, $order: $default-order) {
  @for $i from 1 through length($list) {
    @for $j from $i * -1 through -1 {
      $j: abs($j);
      @if $j > 1 and _str-compare(nth($list, $j), nth($list, $j - 1), $order) {
        $list: _swap($list, $j, $j - 1);
      }
    }
  }
  @return $list;
}

@function comb-sort($list, $order: $default-order) {
  $gap: length($list);
  $shrink: 1.3;
  $swapped: false;

  @while $gap != 1 or $swapped != false {
    $gap: floor($gap / $shrink);
    @if $gap < 1 { $gap: 1 }
    $i: 1;
    $swapped: false;
    @while $i + $gap <= length($list) {
      @if not _str-compare(nth($list, $i), nth($list, $i + $gap), $order) {
        $list: _swap($list, $i, $i + $gap);
        $swapped: true;
      }
      $i: $i + 1;
    }
  }

  @return $list;
}

@function insertion-sort($list, $order: $default-order) {
  @for $i from 1 through length($list) {
    $current: nth($list, $i);
    $j: $i - 1;
    @while $j > 0 and not _str-compare(nth($list, $j), $current, $order) {
      $list: set-nth($list, $j + 1, nth($list, $j));
      $j: $j - 1;
    }
    $list: set-nth($list, $j + 1, $current);
  }
  @return $list;
}

@function quick-sort($list, $order: $default-order) {
  $less:  ();
  $equal: ();
  $large: ();
  @if length($list) > 1 {
    $seed: nth($list, ceil(length($list) / 2));
    @each $item in $list {
      @if $item == $seed {
        $equal: append($equal, $item, list-separator($list));
      }
      @else if _str-compare($item, $seed, $order) {
        $less: append($less, $item, list-separator($list));
      }
      @else if not _str-compare($item, $seed, $order) {
        $large: append($large, $item, list-separator($list));
      }
    }
    @return join(join(quick-sort($less, $order), $equal), quick-sort($large, $order));
  }
  @return $list;
}

@function selection-sort($list, $order: $default-order) {
  @for $i from 1 through length($list) {
    $idx: $i;
    $min: nth($list, $i);
    @for $j from $i + 1 through length($list) {
      @if not _str-compare($min, nth($list, $j), $order) {
        $min: nth($list, $j);
        $idx: $j;
      }
    }
    $list: _swap($list, $i, $idx);
  }
  @return $list;
}

@function shell-sort($list, $order: $default-order) {
  $gaps: 701, 301, 132, 57, 23, 10, 4, 1;
  @for $k from 1 through length($gaps) {
    $gap: nth($gaps, $k);
    $i: $gap;
    @while $i <= length($list) {
      $current: nth($list, $i);
      $j: $i;
      @while $j >= $gap and $j - $gap > 0 and not _str-compare(nth($list, $j - $gap), $current, $order) {
        $list: set-nth($list, $j, nth($list, $j - $gap));
        $j: $j - $gap;
      }
      $list: set-nth($list, $j, $current);
      $i: $i + $gap;
    }
  }
  @return $list;
}

// Sort function
// Delaying to an algorithm-specific function
// depending on the algorithm specified
//
// @param $list: list to sort
// @param $order: order to deal with
// @param $algorithm: algorithm to use
//
// @return [list]: sorted list
@function sort($list, $order: $default-order, $algorithm: "quick") {
  @return call("#{$algorithm}-sort", $list, $order);
}
